<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
    
    <title>Video Stream</title>
    <style>
        .all{
            background-color: #143362;
            font-family : serif;
            color: #fcfdfe;
        }
        #boxs{
            width: 85%; 
            height: 85%; 
            background-color: var(--color); 
            padding: 10px;
            border-radius: 12px;
        }
        .color{
            background-color: black;
            color: #FFF;
            height: 70%;
        }
        
        .switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }
    
        .switch input { 
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #e74350;
            -webkit-transition: .4s;
            transition: .4s;
        }   
    
        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: #ffffff;
            -webkit-transition: .4s;
            transition: .4s;
        }

        input:checked + .slider {
            background-color: #7ED957;
        }
    
        input:focus + .slider {
            box-shadow: 0 0 1px #fcfdfe;
        }
    
        input:checked + .slider:before {
            -webkit-transform: translateX(26px);
            -ms-transform: translateX(26px);
            transform: translateX(26px);
        }
    
        .content {
            display: none;
        }

        /* Rounded sliders */
        .slider.round {
            border-radius: 34px;
        }
    
        .slider.round:before {
            border-radius: 50%;
        }

        .center{
            text-align: center;
        }

        .borders{
            border-radius: 12px;
        }
        .left{
            margin-left: 10%;
        }
        .text{
            color: black;
            text-align:center
        }
        /* Icon 1 */
        .animated-icon1, .animated-icon2, .animated-icon3 {
        width: 30px;
        height: 20px;
        position: relative;
        margin: 0px;
        -webkit-transform: rotate(0deg);
        -moz-transform: rotate(0deg);
        -o-transform: rotate(0deg);
        transform: rotate(0deg);
        -webkit-transition: .5s ease-in-out;
        -moz-transition: .5s ease-in-out;
        -o-transition: .5s ease-in-out;
        transition: .5s ease-in-out;
        cursor: pointer;
        }

        .animated-icon1 span, .animated-icon2 span, .animated-icon3 span {
        display: block;
        position: absolute;
        height: 3px;
        width: 100%;
        border-radius: 9px;
        opacity: 1;
        left: 0;
        -webkit-transform: rotate(0deg);
        -moz-transform: rotate(0deg);
        -o-transform: rotate(0deg);
        transform: rotate(0deg);
        -webkit-transition: .25s ease-in-out;
        -moz-transition: .25s ease-in-out;
        -o-transition: .25s ease-in-out;
        transition: .25s ease-in-out;
        }

        .animated-icon1 span {
        background: #e65100;
        }

        .animated-icon2 span {
        background: #e3f2fd;
        }

        .animated-icon3 span {
        background: #f3e5f5;
        }

        .animated-icon1 span:nth-child(1) {
        top: 0px;
        }

        .animated-icon1 span:nth-child(2) {
        top: 10px;
        }

        .animated-icon1 span:nth-child(3) {
        top: 20px;
        }
    </style>
</head>
<body class="all">
    <div class="container-fluid">
        <!--for show header on web-->
        <div class="container-fluid p-5 text-white text-Left">
            <div class="row">
               <div class="col-lg-3">
                <p class="center" style="line-height: 2px;">Website of</p>
                <h1 class="center" style="line-height: 40px;">Light Room</h1>
            </div>
    
            <div class="col-lg-6"></div> 
    
            <div class="col-lg-3 p-3 rights">
                <label class="switch">
                    <!--เป็นปุ่มสำหรับคำสั่ง-->
                    <input type="checkbox" id="toggleSwitch" checked>
                    <span class="slider round" style="line-height: 50px;"></span>
                </label>
                <!-- Button to trigger the modal -->
                <button type="button" class="navbar-toggler first-button" data-toggle="modal" data-target="#myModal" aria-controls="navbarSupportedContent20" aria-expanded="false" aria-label="Toggle navigation">
                    <div class="animated-icon1"><span></span><span></span><span></span></div>
                </button>
                <!-- Modal -->
                <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title text" id="exampleModalLabel">State Device</h5>
                            </div>
                            <div class="modal-body">
                                <!-- List group inside modal -->
                                <div class="list-group">
                                <a href="#" class="list-group-item list-group-item-action" data-toggle="collapse" data-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">ESP32-CAM + OV2640</a>
                                <a href="#" class="list-group-item list-group-item-action" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">ESP32-DevkitV1</a>
                                <!-- Add more items as needed -->
                                </div>
                                <!-- Accordion inside modal -->
                                <div id="accordion" class="mt-3 text">
                                <div class="collapse" id="collapseOne" aria-labelledby="headingOne" data-parent="#accordion">
                                    <div class="card card-body">
                                        <h5>Data from ESP32-CAM + OV2640: <b id="esp32-cam"></b></h5>
                                        <h5>Last update status from ESP32-CAM + OV2640: <b id="time"><%= values %></b></h5>
                                        <div id="dynamicContent"></div>
                                    </div>
                                </div>
                                <div class="collapse" id="collapseTwo" aria-labelledby="headingTwo" data-parent="#accordion">
                                    <div class="card card-body" id="changedata">
                                        <h5>Data from ESP32: <b id="esp32"><%= dataFromESP32 %></b></h5>
                                        <h5>Last update status from ESP32-DevkitV1: <b id="time-esp32-cam"><%= values %></b></h5>
                                        <div id="dynamicContent"></div>
                                    </div>
                                </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        <div class="container-fluid">
            <hr style="height: 3px; border: width 0; background-color:white"> <!-- creating line for know seperate between header and content-->
        </div>

        <!--for show realtime streaming-->
        <div class="container-fluid" id="content1">
            <div class="row left">
                <!--for show streaming video by Node.JS change content-->
                <div class="col-sm">
                    <section>
                        <img src="">
                    </section>
                    <h3 class="center">Real-Time Detection</h3>
                    <h1 id="count_person" class="center">{{count_person}}</h1> <!--show many people as detected-->
                </div>
                <div class="col-sm">
                    <div id="boxs" style="--color: {{ color }}"></div><!--example for show when detect it's change color-->
                    <h3 class="center">Output</h3>
                </div>
            </div>
        </div>
        <!--end-->

        <!--content for manual-->
        <div class="container-fluid">
            <div class="row">
                <div id="content2" style="display: none;" class="col-sm">
                    <div class="card d-flex justify-content-center" style="width: 18rem;">
                        <img class="card-img-top" src="/images/lamp2.jpg" alt="Card image cap">
                        <div class="card-body">
                            <h5 class="card-title text">LAMP 1</h5>
                            <button onclick="showButton('sleep_left')">Sleep</button>
                            <button onclick="showButton('read_left')">Read</button>
                            <button onclick="showButton('another_left')">Another</button>
                            <button onclick="showButton('close_left')">close</button>
                        </div>
                    </div>
                </div>
                <div id="content3" style="display: none;" class="col-sm">
                    <div class="card d-flex justify-content-center" style="width: 18rem;">
                        <img class="card-img-top" src="/images/lamp2.jpg" alt="Card image cap">
                        <div class="card-body">
                            <h5 class="card-title text">LAMP 2</h5>
                            <button onclick="showButton('sleep_right')">Sleep</button>
                            <button onclick="showButton('read_right')">Read</button>
                            <button onclick="showButton('another_right')">Another</button>
                            <button onclick="showButton('close_right')">close</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!--end-->

    </div>
</body>
<script>
    //hamburger bar
    $(document).ready(function () {

        $('.first-button').on('click', function () {

            $('.animated-icon1').toggleClass('open');
        });
        $('.second-button').on('click', function () {

            $('.animated-icon2').toggleClass('open');
        });
        $('.third-button').on('click', function () {

            $('.animated-icon3').toggleClass('open');
        });
    });
    //for control webpage by wanna automatic or manual 
    const switchInput = document.getElementById('toggleSwitch');
    const content1 = document.getElementById('content1');
    const content2 = document.getElementById('content2');
    const content3 = document.getElementById('content3');

    switchInput.addEventListener('change', function() {
        if (this.checked) {
            content1.style.display = 'block';
            content2.style.display = 'none';
            content3.style.display = 'none';
        } else {
            content1.style.display = 'none';
            content2.style.display = 'block';
            content3.style.display = 'block';
        }
    });
    // for send data to Node.JS and show alert on web u want to do this
    function showButton(buttonName) {
        alert(`Button Clicked: ${buttonName}`);
        fetch('/showButton', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ data: buttonName })
        })
    }
    //for check state esd device
    function updateTime() {
        const now = new Date();
        const currentDateTime = now.toLocaleString();
        document.getElementById('time').innerText = currentDateTime;
        document.getElementById('time-esp32-cam').innerText = currentDateTime;
        fetch('/refreshtime', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ datetime : currentDateTime })
        })
        .then(response => {
            if (!response.ok) {
                document.getElementById('esp32').innerText = "ESP32-DevkitV1 Not Connect Now";
            }
        })
        .then(data => {
            // Handle the successful response
            console.log('Success:', data);
        })
        .catch(error => {
            // Handle errors, log the error message to the console
            console.error('Error:', error.message);
        });
    }
    // Initial update
    updateTime();
    // SetInterval to update the time every 10 seconds
    setInterval(updateTime, 10000); // 10 seconds interval (in milliseconds)
    //for show stream as receive from ESP32-CAM via websocket Node.JS
    const img = document.querySelector('img');
    const boxs = document.getElementById('boxs');
    const WS_URL = 'ws:///192.168.1.104:8888';
    const ws = new WebSocket(WS_URL);
    let urlObject;
    ws.onopen = () => console.log(`Connected to ${WS_URL}`);
    ws.onmessage = message => {
        const arrayBuffer = message.data;
        if(urlObject){
            URL.revokeObjectURL(urlObject);
        }
        urlObject = URL.createObjectURL(new Blob([arrayBuffer]));
        img.src = urlObject; //show oputput on web
        //const data = JSON.parse(message.data);
        
        // Update count_person and color based on detection result
        //document.getElementById('count_person').innerText = data.count_person;
        //boxs.style.backgroundColor = data.color;
    }
</script>
</html>
